function [gridFullStates, caseKeyContext] = airgunShuttlePostprocess( ...
    solution, metadata, gridFullStates)
if nargin == 3
    % Full states already computed
    requireStateComputation = false;
elseif nargin == 2
    requireStateComputation = true;
end

q1History = solution.q(1:3:end,:);

%% Full state function
if requireStateComputation
    disp('State struct vector not provided. Computing state functions.')
    for j = 1:size(q1History,2)
        bubble = solution.bubble(:,j);
        if metadata.usingShuttleModel
            shuttle = solution.shuttle(:,j);
        else
            shuttle = [];
        end
        t = solution.soln.x(j);
        gridFullStates(j) = metadata.discretization.fullState(...
            solution.q(:,j), ...
            t, ...
            bubble, ...
            shuttle, ...
            ~metadata.usingShuttleModel, ...
            true ...
        );
    end 
    disp('State functions computed. Plotting and returning state.')
end

%% Figure 1: Phase plot
eDS = [gridFullStates.eulerDomainStates];
pS = [gridFullStates.portStates];

pSonic_RHistory = [eDS.pSonic_R];
p_RHistory = [eDS.p_R];
M_RHistory = [eDS.M_R];
MHatHistory = [pS.MPort];
pSonicHatHistory = [pS.pSonicPort];


portArea = [pS.APortExposed];
csArea = metadata.discretization.physConst.crossSectionalArea;

bS = [gridFullStates.bubbleStates];
pBubbleHistory = [bS.p];

pRatioGridValue = pSonic_RHistory ./ pBubbleHistory ;
pRatioHat = pSonicHatHistory ./ pBubbleHistory ;
ARatio = portArea / csArea;

caseKeyHistory = cellfun(@(k) caseKey2Num(k), {pS.caseKey});

figure(1); clf;

%% Add phase plots
if metadata.usingShuttleModel
    % Find all case key switches
    caseKeySwitchIndices = [0, find(...
        caseKeyHistory(2:end) ~= caseKeyHistory(1:end-1),...
        length(caseKeyHistory)-1)];
    colorMap = {'k', 'g', 'b', 'm', 'r', 'c'};

    % Export caseKeySwitch context
    caseKeyContext.caseKeySwitchIndices = caseKeySwitchIndices;
    caseKeyContext.caseKeyHistory = caseKeyHistory;
    caseKeyContext.colorMap = colorMap;
    
    subPlotHandle2 = subplot(2,3,2);
    % Dummy lines for legend
    for i = 1:6
        plot(pRatioHat(1), ARatio(1), [colorMap{i}, '-'])
        hold on
    end

    for i = 1:length(caseKeySwitchIndices)-1
        % Include the right boundary element too for continuity
        plotRange = caseKeySwitchIndices(i)+1:caseKeySwitchIndices(i+1)+1;
        plot(pRatioHat(plotRange), ARatio(plotRange), ...
            [colorMap{1+caseKeyHistory(plotRange(1))}], 'LineWidth', 1);
        hold on
    end

    plot(pRatioHat(1), ARatio(1), 'k.', 'MarkerSize', 24)
    text(pRatioHat(1),0.05,'Start')
    hold off

    legendLabels = {'Closed', ...
        'Subsonic', ...
        'Port choked', ...
        'Chamber choked', ...
        'Chamber choked*', ...
        'Relaxation'};
    legend(legendLabels, 'Interpreter', 'latex')


    xlabel ('$\hat{p}^*/p_\mathrm{b}$', 'Interpreter', 'latex', 'FontSize', 18)
    ylabel ('$A_\mathrm{port}/A_\mathrm{cs}$', 'Interpreter', 'latex', 'FontSize', 18)
    set(gca, ...
        'FontSize', 14, ...
        'TickLabelInterpreter', 'latex', ...
        'XMinorTick', 'on', ...
        'YMinorTick', 'on', ...
        'XGrid', 'on', ...
        'XMinorGrid', 'on', ...
        'YGrid', 'on', ...
        'YMinorGrid', 'on' ...
    );

    subPlotHandle3 = subplot(2,3,3);
    plot(MHatHistory(1), ARatio(1), 'k.', 'MarkerSize', 24)
    text(MHatHistory(1),0.05,'Start')
    hold on
    plot(MHatHistory, ARatio, 'k', 'LineWidth', 1)
    hold off
    xlabel ('$\hat{M}$', 'Interpreter', 'latex', 'FontSize', 18)
    ylabel ('$A_\mathrm{port}/A_\mathrm{cs}$', 'Interpreter', 'latex', 'FontSize', 18)
    set(gca, ...
        'FontSize', 14, ...
        'TickLabelInterpreter', 'latex', ...
        'XMinorTick', 'on', ...
        'YMinorTick', 'on', ...
        'XGrid', 'on', ...
        'XMinorGrid', 'on', ...
        'YGrid', 'on', ...
        'YMinorGrid', 'on' ...
    );

    %% Text descriptor
    subplot(2,3,4);
    axis off
    text(0.0, 0.8, sprintf('$n_x = %d$ per m', metadata.nx), 'Interpreter', 'latex', ...
        'FontSize', 13);
    pressureInitialMpa = metadata.discretization.schm.p(metadata.q0(1:3))/1e6;
    pressureInitialPsi = pressureInitialMpa * 145.038;
    text(0.0, 0.7, sprintf('Initial $p$: $%.1f$ MPa = $%.0f$ psi', ...
        pressureInitialMpa, pressureInitialPsi), 'Interpreter', 'latex', ...
        'FontSize', 13);
    text(0.0, 0.5, sprintf('Wall clock time: $%.1f$ s', ...
        metadata.wallClockTotalSeconds), 'Interpreter', 'latex', ...
        'FontSize', 13);

end

%% Add wing plots
subPlotHandle5 = subplot(2,3,5);
plot(pRatioHat, 1e3*solution.soln.x, '-g', 'LineWidth', 1)
hold on
plot(pRatioGridValue, 1e3*solution.soln.x, ':k', 'LineWidth', 1.5)
hold off
xlabel ('$p^*/p_\mathrm{b}$', 'Interpreter', 'latex', 'FontSize', 18)
ylabel ('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 18)
legend({'$\hat{p}^*/p_\mathrm{b}$','$p_\mathrm{R}^*/p_\mathrm{b}$'}, ...
    'location', 'best', ...
    'Interpreter', 'latex' ...
);
set(gca, ...
    'FontSize', 14, ...
    'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', ...
    'YMinorTick', 'on', ...
	'XGrid', 'on', ...
    'XMinorGrid', 'on', ...
    'YGrid', 'on', ...
    'YMinorGrid', 'on' ...
);

subPlotHandle1 = subplot(2,3,1);
plot(1e3*solution.soln.x, ARatio, 'k', 'LineWidth', 1)
xlabel ('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 18)
ylabel ('$A_\mathrm{port}/A_\mathrm{cs}$', 'Interpreter', 'latex', 'FontSize', 18)
set(gca, ...
    'FontSize', 14, ...
    'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', ...
    'YMinorTick', 'on', ...
	'XGrid', 'on', ...
    'XMinorGrid', 'on', ...
    'YGrid', 'on', ...
    'YMinorGrid', 'on' ...
);

subPlotHandle2 = subplot(2,3,6);
plot(MHatHistory, 1e3*solution.soln.x, '-g', 'LineWidth', 1)
hold on
plot(M_RHistory, 1e3*solution.soln.x, ':k', 'LineWidth', 1.5)
hold off
xlabel ('$M$', 'Interpreter', 'latex', 'FontSize', 18)
ylabel ('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 18)
legend({'$\hat{M}$','$M_\mathrm{R}$'}, ...
    'location', 'best', ...
    'Interpreter', 'latex' ...
);
set(gca, ...
    'FontSize', 14, ...
    'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', ...
    'YMinorTick', 'on', ...
	'XGrid', 'on', ...
    'XMinorGrid', 'on', ...
    'YGrid', 'on', ...
    'YMinorGrid', 'on' ...
);

%% Reposition subplots
subplot(2,3,1);
set(gca, 'position', [0.07, 0.5 0.15 0.45])

subplot(2,3,2);
set(gca, 'position', [0.29, 0.5 0.30 0.45])

subplot(2,3,3);
set(gca, 'position', [0.66, 0.5 0.30 0.45])

subplot(2,3,4);
set(gca, 'position', [0.07, 0.15 0.15 0.25])

subplot(2,3,5);
set(gca, 'position', [0.29, 0.15 0.30 0.25])

subplot(2,3,6);
set(gca, 'position', [0.66, 0.15 0.30 0.25])

%%
set(gcf, 'position', ...
    [ -1877 54 1514 869]);

%% Figure 5: case keys
figure(5); clf;
caseKeyHistory = cellfun(@(k) caseKey2Num(k), {pS.caseKey});
plot(1e3*solution.soln.x, caseKeyHistory, 'k', 'LineWidth', 1)

xlabel ('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 18)
ylim([-0.5, 5.5])
set(gca, ...
    'FontSize', 14, ...
    'TickLabelInterpreter', 'latex', ...
    'YMinorTick', 'on', ...
    'XGrid', 'on', ...
    'XMinorGrid', 'on' ...
);

labels = {
    'Port closed', ...
    'Subsonic', ...
    'Port choked', ...
    'Chamber choked', ...
    'Chamber choked*', ...
    'Relaxation' ...
};
set(gca, 'YTick', 0:5, 'YTickLabel', labels)

end

function caseNum = caseKey2Num(caseKey)
    if strcmpi('portClosed', caseKey)
        caseNum = 0;
    elseif strcmpi('subsonic', caseKey)
        caseNum = 1;
    elseif strcmpi('portChoked', caseKey)
        caseNum = 2;
    elseif strcmpi('chamberChokedNatural', caseKey)
        caseNum = 3;
    elseif strcmpi('chamberChokedForced', caseKey)
        caseNum = 4;
    elseif strcmpi('relaxation', caseKey)
        caseNum = 5;
    else
        caseNum = NaN;
    end
end
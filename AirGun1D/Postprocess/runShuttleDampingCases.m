% Runs several test cases for the power-law pressure bubble model, with an
% equilibration  timescale.
% By changing @bubbleRHS, we can work with power-law pressure in the bubble
% (p ~ (r/R)^nu) where nu can go from an initial value (say, -2) to a 0 as
% t -> infty, via a timescale tau. Three ways to do this explicitly with t
% is to prescribe and exponential, a tanh, or a Gaussian function to nu. A
% time-invariant way that makes more sense is to partition energy in the
% bubble into kinetic (nonequilibrium) and internal energy, with only the
% latter being used to compute the pressure.

%% Header
% Add required dependencies from AirGun1D root.
% The following assumes the user is in the ./AirGun1D folder (otherwise,
% replace the following lines with the relative path to the respective
% folders.
addpath .\FlowRelations
addpath .\SBPSAT
addpath ..\sbplib

%% Runs
% Set parallel pool
% If parallel toolbox is not installed, comment out the following and
% replace parfeval with airgunShuttleDeploy( nx, [true|false], [...] ).
pool = gcp('nocreate');
if isempty(pool)
    pool = parpool(2);
end
nx = 40;

%% Coupled, with power-law pressure in bubble
futuresShuttleDamp(1) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'dampingConstant', 0) ...
));
futuresShuttleDamp(2) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'dampingConstant', 1e4) ...
));
futuresShuttleDamp(3) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'dampingConstant', 5e4) ...
));

%% Compute postprocess data (signals, fft of signal, wall pressure)
wait(futuresShuttleDamp);
disp('Run complete.')
%% Memory management
solution_damping(1) = futuresShuttleDamp(1).OutputArguments{1};
metadata_damping(1) = futuresShuttleDamp(1).OutputArguments{2};
solution_damping(2) = futuresShuttleDamp(2).OutputArguments{1};
metadata_damping(2) = futuresShuttleDamp(2).OutputArguments{2};
solution_damping(3) = futuresShuttleDamp(3).OutputArguments{1};
metadata_damping(3) = futuresShuttleDamp(3).OutputArguments{2};
clear futuresShuttleDamp;

%% Get full state history
for i = 1:3
    [fullState_damping{i}, ~] = ...
            airgunShuttlePostprocess( ...
            solution_damping(i), ...
            metadata_damping(i));
end

%% Copy full state (reference case)
% If error: run runVariationCases.m first
fullState_damping{4} = fullState_damping{3};
fullState_damping{3} = fullState_ref;
solution_damping(end+1) = solution_damping(end);
solution_damping(3) = solution_ref;
metadata_damping(end+1) = metadata_damping(end);
metadata_damping(3) = metadata_ref;
%% Shuttle position and mass rate out
figure(801); clf

tL = tiledlayout(2+2+3,4);

for i = 1:4
    agtools.plotPortAndMass(fullState_damping{i}, ...
        solution_damping(i), ...
        metadata_damping(i));
    drawnow
end

dampingPalette = [ ... 
    ...194, 227, 53
    196, 255, 40; ...
    ...129, 150, 35
    88, 102, 23;
    0, 0, 0;
    126, 77, 153]/255;

for tileNum = [1, 2, 9, 10, 17, 18]
    nexttile(tileNum)
    ch = get(gca,'children');
    for i = 1:4
        set(ch(5-i), 'Color', dampingPalette(i,:))
    end
end

legend(["$b = 0~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$", ...
        "$b = 1 \times 10^{4}~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$", ...
        "$b = 2.5 \times 10^{4}~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$", ...
        "$b = 5 \times 10^{4}~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$"], ...
        'Interpreter', 'latex')

%%
figure(802); clf;
[t, field_L, fieldData] = agtools.plotFiringChamber_Wall( ...
    fullState_damping{1}, 'p', HiTestData);

for i = 1:4
    eDS = [fullState_damping{i}.eulerDomainStates];
    p = [eDS.p];
    plot([fullState_damping{i}.t]*1e3, p(1,:)/1e6, ...
         'LineWidth', 2)
    hold on
end
plot(fieldData.t, fieldData.y, '-');

ch = get(gca,'children');
for i = 1:4
    set(ch(5-i), 'Color', dampingPalette(i,:))
end
ylabel('$p$ [MPa]', 'Interpreter', 'latex')
xlabel('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 14)

set(gca, 'FontSize', 14, 'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', 'YMinorTick', 'on');

legend(["$b = 0~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$", ...
        "$b = 1 \times 10^{4}~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$", ...
        "$b = 2.5 \times 10^{4}~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$", ...
        "$b = 5 \times 10^{4}~\mathrm{N} \cdot \mathrm{s} \cdot \mathrm{m}^{-1}$"], ...
        'Interpreter', 'latex')
    
%% Flow-related damping
futures_qDamping(1) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'dampingQuadraticConstant', 100) ...
));

%% Memory management
wait(futures_qDamping);
disp('Run complete.')
solution_qdamping = futures_qDamping(1).OutputArguments{1};
metadata_qdamping = futures_qDamping(1).OutputArguments{2};
clear 'futures_qDamping'

%%
[solution_qdamping, metadata_qdamping] = airgunShuttleDeploy(nx, true, ...
struct( ...
'bubbleModel', struct( ...
'type', 'single', ...
'M', 10, ...
'alpha', 0.8), ...
'extraOptions', struct( ...
'dampingQuadraticConstant', 400) ...
));

%% Compute full state
[fullState_qdamping, ~] = ...
    airgunShuttlePostprocess( ...
    solution_qdamping, ...
    metadata_qdamping);

%%
figure(901); clf
[t, field_L, fieldData] = agtools.plotFiringChamber_Wall( ...
    fullState_qdamping, 'p', HiTestData);
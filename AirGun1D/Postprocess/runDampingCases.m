% Performs several runs with different damping parameters, using a
% nonequilibrium bubble pressure model.

%% Header
assert(strcmpi(...
    'C:\Users\Fredric\Documents\Airgun\airgun_code_li\AirGun1D', ...
    cd))
addpath .\FlowRelations
addpath .\SBPSAT
addpath ..\sbplib

%% Runs
% Set parallel pool
% If parallel toolbox is not installed, comment out the following and
% replace parfeval with airgunShuttleDeploy( nx, [true|false], [...] ).
pool = gcp('nocreate');
if isempty(pool)
    pool = parpool(4);
end

nx = 40;

% Coupled, with power-law pressure in bubble
futures(1) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct('bubbleModel', struct(...
        'type', 'single-power', ...
        'M', 10, ...
        'alpha', 0.8)));
futures(2) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct('bubbleModel', struct(...
        'type', 'single-power', ...
        'M', 10, ...
        'alpha', 0.)));
futures(3) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct('bubbleModel', struct(...
        'type', 'single-power', ...
        'M', 1, ...
        'alpha', 0.8)));
futures(4) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct('bubbleModel', struct(...
        'type', 'single-power', ...
        'M', 1, ...
        'alpha', 0.)));
wait(futures);
disp('Beginning postprocess threads')
%% Compute postprocess data (signals, fft of signal, wall pressure)
% coupled.postprocess = buildState( ...
%     futures(1).OutputArguments{1}, ...
%     futures(1).OutputArguments{2}, HiTestData);
for i = 1:4
    postprocessStates(i) = buildState( ...
        futures(i).OutputArguments{1}, ...
        futures(i).OutputArguments{2}, HiTestData);
end
%%
wait(futuresPost);
standarddamping.postprocess = futuresPost(1).OutputArguments{1};
noalphadamping.postprocess = futuresPost(2).OutputArguments{1};
lowmagnification.postprocess = futuresPost(3).OutputArguments{1};
lowdamping.postprocess = futuresPost(4).OutputArguments{1};

%%
legendlabels = {'Hydrophone data', ...
    '$\alpha = 0, M = 10$', ...
    '$\alpha = 0.8, M = 10$', ...
    '$\alpha = 0., M = 1$', ...
    '$\alpha = 0.8, M = 1$'};

%% Plot mass flow rate
figure(2010); clf
tL = tiledlayout(2,2);
nexttile(4, [1, 1]);

plot(1e3*noalphadamping.postprocess.t,noalphadamping.postprocess.portMassFlow, ...
    '-', 'LineWidth', 1.5);
hold on
plot(1e3*standarddamping.postprocess.t,standarddamping.postprocess.portMassFlow, ...
    '--', 'LineWidth', 1.5);
plot(1e3*lowdamping.postprocess.t,lowdamping.postprocess.portMassFlow, ...
    '-', 'LineWidth', 1.5);
plot(1e3*lowmagnification.postprocess.t,lowmagnification.postprocess.portMassFlow, ...
    '--', 'LineWidth', 1.5);
hold off
xlim([0, 300])
ylim([0, 600])
set(gca, 'TickLabelInterpreter', 'latex', 'FontSize', 12.5, ...
    'XMinorTick', 'on', ...
    'YMinorTick', 'on', ...
    'TickLength', [0.0100    0.0250]);
xlabel('$t$ [ms]', 'Interpreter', 'latex')
ylabel('$\dot{m}$ [kg/s]', 'Interpreter', 'latex')

legend(legendlabels, ...
       'Location', 'best', 'Interpreter' ,'latex')

%% Plot signals
nexttile(1, [1,2]);

linecolor = colormap('lines');

plot(1e3*standarddamping.postprocess.timeDAQ, ...
     standarddamping.postprocess.signalData/1e3, '.-k', ...
     'MarkerSize', 2);
hold on
plot(1e3*noalphadamping.postprocess.tSample, ...
     noalphadamping.postprocess.signalModel/1e3, '-', 'LineWidth', 1.5, ...
     'Color', linecolor(1,:));
plot(1e3*standarddamping.postprocess.tSample, ...
     standarddamping.postprocess.signalModel/1e3, '--', 'LineWidth', 1.5, ...
     'Color', linecolor(2,:));
plot(1e3*lowdamping.postprocess.tSample, ...
     lowdamping.postprocess.signalModel/1e3, '-', 'LineWidth', 1.5, ...
     'Color', linecolor(3,:));
plot(1e3*lowmagnification.postprocess.tSample, ...
     lowmagnification.postprocess.signalModel/1e3, '--', 'LineWidth', 1.5, ...
     'Color', linecolor(4,:));
hold off
xlabel('$t$ [ms]', 'Interpreter', 'latex')
ylabel('$\Delta p$ [kPa]', 'Interpreter', 'latex')
legend(legendlabels, ...
       'Location', 'best', 'Interpreter' ,'latex')

nexttile(3, [1, 1]);
plot(1e3*standarddamping.postprocess.timeDAQ, ...
     standarddamping.postprocess.signalData/1e3, '.-k', ...
     'MarkerSize', 2);
hold on
plot(1e3*noalphadamping.postprocess.tSample, ...
     noalphadamping.postprocess.signalModel/1e3, '-', 'LineWidth', 1.5, ...
     'Color', linecolor(1,:));
plot(1e3*standarddamping.postprocess.tSample, ...
     standarddamping.postprocess.signalModel/1e3, '--', 'LineWidth', 1.5, ...
     'Color', linecolor(2,:));
plot(1e3*lowdamping.postprocess.tSample, ...
     lowdamping.postprocess.signalModel/1e3, '-', 'LineWidth', 1.5, ...
     'Color', linecolor(3,:));
plot(1e3*lowmagnification.postprocess.tSample, ...
     lowmagnification.postprocess.signalModel/1e3, '--', 'LineWidth', 1.5, ...
     'Color', linecolor(4,:));
hold off
xlim([0, 300])
xlabel('$t$ [ms]', 'Interpreter', 'latex')
ylabel('$\Delta p$ [kPa]', 'Interpreter', 'latex')

legend(legendlabels, ...
       'Location', 'best', 'Interpreter' ,'latex')
   
%% Figure formatting
set(gcf, 'position', [-1707, 248, 1000, 633]);
set(gca, 'TickLabelInterpreter', 'latex', 'FontSize', 12.5, ...
    'XMinorTick', 'on', ...
    'YMinorTick', 'on', ...
    'TickLength', [0.0100    0.0250]);

%% Frequency domain plot
% figure(2011); clf
% loglog(standarddamping.postprocess.omegaVecDataPositive, ...
%     abs(standarddamping.postprocess.datafftPositive), '.-k', ...
%     'MarkerSize', 2)
% hold on
% loglog(standarddamping.postprocess.omegaVecPositive, ...
%     abs(standarddamping.postprocess.modelfftPositive), '.-b', ...
%     'MarkerSize', 2)
% hold off
% legend({'Data','Coupled model'})

%% Wall pressure
figure(2012); clf;

% Plot pressure [MPa] vs. t [ms]
plot(1000*standarddamping.postprocess.iNetTimeAxis, ...
     1e-6*standarddamping.postprocess.iNetp_L, 'b-', 'LineWidth', 1);
hold on
plot(1000*noalphadamping.postprocess.t, 1e-6*noalphadamping.postprocess.p_LGrid, 'k-', 'LineWidth', 1);
plot(1000*standarddamping.postprocess.t, 1e-6*standarddamping.postprocess.p_LGrid, 'k-', 'LineWidth', 1);
plot(1000*lowdamping.postprocess.t, 1e-6*lowdamping.postprocess.p_LGrid, 'g-', 'LineWidth', 1);
plot(1000*lowmagnification.postprocess.t, 1e-6*lowmagnification.postprocess.p_LGrid, 'r-', 'LineWidth', 1);
hold off

xlim([0, 500]);

xlabel('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 14)
ylabel('$p$ [MPa]', 'Interpreter', 'latex', 'FontSize', 14)
legend(legendlabels(2:end), ...
       'Location', 'best', 'Interpreter' ,'latex')
set(gca, 'FontSize', 12, 'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', 'YMinorTick', 'on')

%% External/bubble pressure
figure(2013); clf;

% Plot pressure [MPa] vs. t [ms]
% Trim index for data
trimIndex = find(standarddamping.postprocess.iNetp_B > 0.15e6,1 ,'first') -1 ;
iNetTimeAxis_p_B = standarddamping.postprocess.iNetTimeAxis_p_B(trimIndex:end) ...
    - standarddamping.postprocess.iNetTimeAxis_p_B(trimIndex);
plot(1000*iNetTimeAxis_p_B, ...
     1e-6*standarddamping.postprocess.iNetp_B(trimIndex:end), 'b-', 'LineWidth', 1);
hold on
plot(1000*noalphadamping.postprocess.t, 1e-6*noalphadamping.postprocess.bubblePressure, 'k-', 'LineWidth', 1);
plot(1000*standarddamping.postprocess.t, 1e-6*standarddamping.postprocess.bubblePressure, 'k-', 'LineWidth', 1);
plot(1000*lowdamping.postprocess.t, 1e-6*lowdamping.postprocess.bubblePressure, 'g-', 'LineWidth', 1);
plot(1000*lowmagnification.postprocess.t, 1e-6*lowmagnification.postprocess.bubblePressure, 'r-', 'LineWidth', 1);
hold off

xlim([0, 100]);

xlabel('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 14)
ylabel('$p$ [MPa]', 'Interpreter', 'latex', 'FontSize', 14)
legend(legendlabels, ...
       'Location', 'best', 'Interpreter' ,'latex')
set(gca, 'FontSize', 12, 'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', 'YMinorTick', 'on')
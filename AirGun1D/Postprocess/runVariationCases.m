% Runs several test cases for the power-law pressure bubble model, with an
% equilibration  timescale.
% By changing @bubbleRHS, we can work with power-law pressure in the bubble
% (p ~ (r/R)^nu) where nu can go from an initial value (say, -2) to a 0 as
% t -> infty, via a timescale tau. Three ways to do this explicitly with t
% is to prescribe and exponential, a tanh, or a Gaussian function to nu. A
% time-invariant way that makes more sense is to partition energy in the
% bubble into kinetic (nonequilibrium) and internal energy, with only the
% latter being used to compute the pressure.

%% Header
% Add required dependencies from AirGun1D root.
% The following assumes the user is in the ./AirGun1D folder (otherwise,
% replace the following lines with the relative path to the respective
% folders.
addpath .\FlowRelations
addpath .\SBPSAT
addpath ..\sbplib

%% Runs
% Set parallel pool
% If parallel toolbox is not installed, comment out the following and
% replace parfeval with airgunShuttleDeploy( nx, [true|false], [...] ).
pool = gcp('nocreate');
if isempty(pool)
    pool = parpool(2);
end
nx = 40;

%% Coupled, with power-law pressure in bubble
futuresVar(1) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'shuttleAssemblyMass', 63/2 * .454) ...
));
futuresVar(2) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'shuttleAssemblyMass', 63*2 * .454) ...
));
futuresVar(3) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'shuttleAssemblyMass', 63/4 * .454) ...
));
futuresVar(4) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'extraOptions', struct( ...
          'shuttleAssemblyMass', 63 * .454) ...
));

%% Compute postprocess data (signals, fft of signal, wall pressure)
wait(futuresVar);
disp('Run complete.')
%% Memory management
solution_shlight = futuresVar(1).OutputArguments{1};
metadata_shlight = futuresVar(1).OutputArguments{2};
solution_shheavy = futuresVar(2).OutputArguments{1};
metadata_shheavy = futuresVar(2).OutputArguments{2};
solution_shfeath = futuresVar(3).OutputArguments{1};
metadata_shfeath = futuresVar(3).OutputArguments{2};
solution_ref = futuresVar(4).OutputArguments{1};
metadata_ref = futuresVar(4).OutputArguments{2};
clear futuresVar;

%% Get full state history
[fullState_shlight, ~] = ...
        airgunShuttlePostprocess( ...
        solution_shlight, ...
        metadata_shlight);
[fullState_shheavy, ~] = ...
        airgunShuttlePostprocess( ...
        solution_shheavy, ...
        metadata_shheavy);
[fullState_shfeath, ~] = ...
        airgunShuttlePostprocess( ...
        solution_shfeath, ...
        metadata_shfeath);
[fullState_ref, ~] = ...
        airgunShuttlePostprocess( ...
        solution_ref, ...
        metadata_ref);

%% Mass rate out
figure(601); clf
agtools.plotFiringChamber_exit(fullState_shfeath);
hold on
agtools.plotFiringChamber_exit(fullState_shlight);
agtools.plotFiringChamber_exit(fullState_ref);
agtools.plotFiringChamber_exit(fullState_shheavy);
hold off

ch = get(gca,'Children');
set(ch(4), 'Color', 0.85*[1 1 1], 'LineStyle', '--', 'LineWidth', 1.5);
set(ch(3), 'Color', 0.6*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);
set(ch(2), 'Color', 0.3*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);
set(ch(1), 'Color', 0.0*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);

xlim([0, 25])
legend(arrayfun(@(m) sprintf("$%.2f$ kg", m), masses), ...
       'Interpreter', 'latex', ...
       'location', 'best')
    
%% Shuttle position
temp.sS = [fullState_shfeath.shuttleStates];
shuttle_position_shfeath = [temp.sS.shuttle_position];
temp.sS = [fullState_shlight.shuttleStates];
shuttle_position_shlight = [temp.sS.shuttle_position];
temp.sS = [fullState_shheavy.shuttleStates];
shuttle_position_shheavy = [temp.sS.shuttle_position];
temp.sS = [fullState_ref.shuttleStates];
shuttle_position_ref = [temp.sS.shuttle_position];


figure(602); clf
plot(1e3*[fullState_shfeath.t], shuttle_position_shfeath, 'r', ...
    'LineWidth', 1.5)
hold on
plot(1e3*[fullState_shlight.t], shuttle_position_shlight, 'g', ...
    'LineWidth', 1.5)
plot(1e3*[fullState_ref.t], shuttle_position_ref, 'b', ...
    'LineWidth', 1.5)
plot(1e3*[fullState_shheavy.t], shuttle_position_shheavy, 'k', ...
    'LineWidth', 1.5)
hold off

ch = get(gca,'Children');
% set(ch(3), 'Color', colorCoarse, 'LineStyle', '-', 'LineWidth', 2.5);
% set(ch(2), 'Color', colorRef,    'LineStyle', '-', 'LineWidth', 1.5);
% set(ch(1), 'Color', colorFine,   'LineStyle', ':', 'LineWidth', 2.0);

legend(["Feather", "Light", "Medium", "Heavy"], ...
        'Interpreter', 'latex')

xlabel('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 14)
ylabel('$\xi$ [m]', 'Interpreter', 'latex', 'FontSize', 14)
set(gca, 'FontSize', 15, 'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', 'YMinorTick', 'on');
legend(arrayfun(@(m) sprintf("$%.2f$ kg", m), masses), ...
       'Interpreter', 'latex', ...
       'location', 'best')
   
ch = get(gca,'Children');
set(ch(4), 'Color', 0.85*[1 1 1], 'LineStyle', '--', 'LineWidth', 1.5);
set(ch(3), 'Color', 0.6*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);
set(ch(2), 'Color', 0.3*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);
set(ch(1), 'Color', 0.0*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);

% Plot inset
inset_axes = axes('Position',[.23 .32 .20 .36]);
box on
plot(1e3*[fullState_shfeath.t], shuttle_position_shfeath, 'r', ...
    'LineWidth', 1.5)
hold on
plot(1e3*[fullState_shlight.t], shuttle_position_shlight, 'g', ...
    'LineWidth', 1.5)
plot(1e3*[fullState_ref.t], shuttle_position_ref, 'b', ...
    'LineWidth', 1.5)
plot(1e3*[fullState_shheavy.t], shuttle_position_shheavy, 'k', ...
    'LineWidth', 1.5)
hold off
xlabel ''
ylabel ''
hold off
xlim([0, 30])
ylim([0.04, 0.060])
set(gca, 'FontSize', 12, 'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', 'YMinorTick', 'on');
ch = get(gca,'Children');
set(ch(4), 'Color', 0.85*[1 1 1], 'LineStyle', '--', 'LineWidth', 1.5);
set(ch(3), 'Color', 0.6*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);
set(ch(2), 'Color', 0.3*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);
set(ch(1), 'Color', 0.0*[1 1 1], 'LineStyle', '-', 'LineWidth', 1.5);

get(gcf, 'position', [815   377   661   279])

%% Run pressure variation cases
pool = gcp('nocreate');
if isempty(pool)
    pool = parpool(2);
end
nx = 40;

futuresPressures_(1) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'airgunPressure', 600 ...
));
futuresPressures_(2) = parfeval(pool, @airgunShuttleDeploy, 2, ...
    nx, true, ...
    struct( ...
        'bubbleModel', struct( ...
          'type', 'single', ...
          'M', 10, ...
          'alpha', 0.8), ...
        'airgunPressure', 400 ...
));

%% Compute postprocess data (signals, fft of signal, wall pressure)
wait(futuresPressures_);
disp('Run complete.')
%% Memory management
solution_600 = futuresPressures_(1).OutputArguments{1};
metadata_600 = futuresPressures_(1).OutputArguments{2};
solution_400 = futuresPressures_(2).OutputArguments{1};
metadata_400 = futuresPressures_(2).OutputArguments{2};
clear futuresPressures_;

%% Get full state history
[fullState_600, ~] = ...
        airgunShuttlePostprocess( ...
        solution_600, ...
        metadata_600);
[fullState_400, ~] = ...
        airgunShuttlePostprocess( ...
        solution_400, ...
        metadata_400);
    
%%
figure(701); clf
tL = tiledlayout(2,1);
nexttile(tL);
agtools.plotFiringChamber_exit(fullState_ref);
hold on
agtools.plotFiringChamber_exit(fullState_600);
agtools.plotFiringChamber_exit(fullState_400);

pressure_palette = [
    0, 0, 0;
    60, 71, 89;
    93, 116, 153;
    ]/255;

ch = get(gca,'children');
for i = 1:3
    set(ch(4-i), 'Color', pressure_palette(i,:))
end

legend(["$p = 6.895~\mathrm{MPa}$", ...
    "$p = 4.137~\mathrm{MPa}$", ...
    "$p = 2.758~\mathrm{MPa}$"], 'Interpreter', 'latex')

tSample = linspace(0,0.3,4000);
nexttile(tL);
[tSample, p, dists, funcs_ref] = agtools.plotSignal(...
    fullState_ref, solution_ref, metadata_ref, 10, ...
    6, tSample, pressure_palette(1,:), '-');
hold on
[tSample, p, dists, funcs_600] = agtools.plotSignal(...
    fullState_600, solution_600, metadata_600, 10, ...
    6, tSample, pressure_palette(2,:), '-');
[tSample, p, dists, funcs_400] = agtools.plotSignal(...
    fullState_400, solution_400, metadata_400, 10, ...
    6, tSample, pressure_palette(3,:), '-');
hold off

legend(["$p = 6.895~\mathrm{MPa}$", ...
    "$p = 4.137~\mathrm{MPa}$", ...
    "$p = 2.758~\mathrm{MPa}$"], 'Interpreter', 'latex')

%
figure(702);
start_index = 1470;
manual_tshift = 3.8;
tSignal = HiTestData(25).headerDAQ.SamplingInterval * ...
    ((1:HiTestData(25).headerDAQ.SampleCount)-1);
timeDAQ = 1e3*(tSignal(start_index:end)-tSignal(start_index)) ...
          + manual_tshift;
[omegaVec_ref, modelfft_ref] = agtools.plotFFT(timeDAQ*1e-3, [], ...
    @(t) funcs_ref.pFn(t)*dists.r1);
[omegaVec_600, modelfft_600] = agtools.plotFFT(timeDAQ*1e-3, [], ...
    @(t) funcs_600.pFn(t)*dists.r1);
[omegaVec_400, modelfft_400] = agtools.plotFFT(timeDAQ*1e-3, [], ...
    @(t) funcs_400.pFn(t)*dists.r1);

%%
figure(702); clf;
semilogx(omegaVec_ref, 20*log10(abs(modelfft_ref)/1e-6), ...
    'Color', pressure_palette(1,:), "LineWidth", 1.5)
hold on
semilogx(omegaVec_600, 20*log10(abs(modelfft_600)/1e-6), ...
    'Color', pressure_palette(2,:), "LineWidth", 1.5)
semilogx(omegaVec_400, 20*log10(abs(modelfft_400)/1e-6), ...
    'Color', pressure_palette(3,:), "LineWidth", 1.5)
hold off

xlabel("$f$ [Hz]", 'Interpreter', 'latex');
ylabel("SPL [dB re $1~\mu$Pa]", 'Interpreter', 'latex');
xlim([1e-1, 1e3]);
ylim([100, 220])
legend(["$p = 6.895~\mathrm{MPa}$", ...
    "$p = 4.137~\mathrm{MPa}$", ...
    "$p = 2.758~\mathrm{MPa}$"], 'Interpreter', 'latex')
set(gca, 'FontSize', 14, ...
    'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', 'YMinorTick', 'on', ...
    'LineWidth', 1);
grid on

%% Data part (needs changing airgun depth, lateral sep etc.)
% figure(703);clf
% DAQGain = 8;
% DAQSens = 1e5/7.6; % Pa per V
% manual_tshift = .045;
% timeDAQ = ...
%   1e3*( ...
%     (0:HiTestData(12).headerDAQ.SampleCount-1) ...
%     *HiTestData(12).headerDAQ.SamplingInterval - manual_tshift);
% hold on
% plot(timeDAQ, DAQGain*DAQSens*HiTestData(12).entriesDAQ(3,:));
% xlim([0, 300])
% plot(timeDAQ, DAQGain*DAQSens*HiTestData(15).entriesDAQ(3,:));
% hold off

%% Plot pressure
% figure(705); clf;
% temp.pS = [fullState_400.portStates];
% temp.bS = [fullState_400.bubbleStates];
% plot([fullState_400.t], [temp.pS.pPort])
% hold on
% plot([fullState_400.t], [temp.bS.E] ./ [temp.bS.R].^3 * 3/4 / pi * 0.4)
% hold off

%% Shuttle position
figure(704); clf

temp.sS = [fullState_ref.shuttleStates];
shuttle_position_ref = [temp.sS.shuttle_position];
temp.sS = [fullState_600.shuttleStates];
shuttle_position_600 = [temp.sS.shuttle_position];
temp.sS = [fullState_400.shuttleStates];
shuttle_position_400 = [temp.sS.shuttle_position];


caseInts_ref = digest_caseKey([fullState_ref.portStates]);
caseInts_600 = digest_caseKey([fullState_600.portStates]);
caseInts_400 = digest_caseKey([fullState_400.portStates]);

t_ref = [fullState_ref.t];
t_600 = [fullState_600.t];
t_400 = [fullState_400.t];

% Plot choked part
plot(1e3*t_ref(caseInts_ref == 1), ...
     shuttle_position_ref(caseInts_ref == 1), ...
     'Color', pressure_palette(1,:), ...
     'LineWidth', 1.5);
hold on
plot(1e3*t_600(caseInts_600 == 1), ...
     shuttle_position_600(caseInts_600 == 1), ...
     'Color', pressure_palette(2,:), ...
     'LineWidth', 1.5);
plot(1e3*t_400(caseInts_400 == 1), ...
     shuttle_position_400(caseInts_400 == 1), ...
     'Color', pressure_palette(3,:), ...
     'LineWidth', 1.5);

% Plot unchoked part
plot(1e3*t_ref(caseInts_ref == 0 & t_ref > 1e-3), ...
     shuttle_position_ref(caseInts_ref == 0 & t_ref > 1e-3), ...
     '--', 'Color', pressure_palette(1,:), ...
     'LineWidth', 1.5);
plot(1e3*t_600(caseInts_600 == 0 & t_600 > 1e-3), ...
     shuttle_position_600(caseInts_600 == 0 & t_600 > 1e-3), ...
     '--', 'Color', pressure_palette(2,:), ...
     'LineWidth', 1.5);
plot(1e3*t_400(caseInts_400 == 0 & t_400 > 1e-2), ...
     shuttle_position_400(caseInts_400 == 0 & t_400 > 1e-2), ...
     '--', 'Color', pressure_palette(3,:), ...
     'LineWidth', 1.5);
hold off

xlabel('$t$ [ms]', 'Interpreter', 'latex', 'FontSize', 14)
ylabel('$\xi$ [m]', 'Interpreter', 'latex', 'FontSize', 14)
set(gca, 'FontSize', 14, 'TickLabelInterpreter', 'latex', ...
    'XMinorTick', 'on', 'YMinorTick', 'on');
legend(["$p = 6.895~\mathrm{MPa}$", ...
        "$p = 4.137~\mathrm{MPa}$", ...
        "$p = 2.758~\mathrm{MPa}$"], 'Interpreter', 'latex')
set(gcf, 'position', [212   576   618   221])

% Converst port state string -> int
function caseInts = digest_caseKey(portStates)
for i = 1:length(portStates)
    if strcmpi('subsonic', portStates(i).caseKey)
        caseInts(i) = 0;
    elseif strcmpi('portChoked', portStates(i).caseKey)
        caseInts(i) = 1;
    else
        caseInts(i) = -1;
    end
end
end